extends Node2D

var body_a := PhysicsServer2D.body_create()
var body_b := PhysicsServer2D.body_create()
var body_a_with_space1 := PhysicsServer2D.body_create()
var body_b_with_space1 := PhysicsServer2D.body_create()
var body_a_with_space2 := PhysicsServer2D.body_create()
var body_b_with_space2 := PhysicsServer2D.body_create()

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	var new_space1 := PhysicsServer2D.space_create()
	var new_space2 := PhysicsServer2D.space_create()
	PhysicsServer2D.body_set_space(body_a_with_space1, new_space1)
	PhysicsServer2D.body_set_space(body_a_with_space2, new_space2)
	PhysicsServer2D.body_set_space(body_b_with_space1, new_space1)
	PhysicsServer2D.body_set_space(body_b_with_space2, new_space2)
	test_spring_joint_empty()
	test_spring_joint_base()
	test_spring_joint()
	print("Spring joint tests passed.")


func test_spring_joint_empty():
	var stiffness = PhysicsServer2D.damped_spring_joint_get_param(RID(), PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_STIFFNESS)
	assert(stiffness == 0)
	var length = PhysicsServer2D.damped_spring_joint_get_param(RID(), PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_REST_LENGTH)
	assert(length == 0)
	var damping = PhysicsServer2D.damped_spring_joint_get_param(RID(), PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_DAMPING)
	assert(damping == 0)
	#var invalid = PhysicsServer2D.damped_spring_joint_get_param(RID(), 100)
	#assert(invalid == 0)
	# Test no crash here
	PhysicsServer2D.damped_spring_joint_set_param(RID(), PhysicsServer2D.DAMPED_SPRING_STIFFNESS, 1)
	PhysicsServer2D.damped_spring_joint_set_param(RID(), PhysicsServer2D.DAMPED_SPRING_REST_LENGTH, 2)
	PhysicsServer2D.damped_spring_joint_set_param(RID(), PhysicsServer2D.DAMPED_SPRING_DAMPING, 3)
	# PhysicsServer2D.damped_spring_joint_set_param(RID(), 100, 4)
	PhysicsServer2D.joint_clear(RID())
	var joint_type := PhysicsServer2D.joint_get_type(RID())
	#assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_make_damped_spring(RID(), Vector2.ZERO, Vector2.ZERO, RID(), RID())
	PhysicsServer2D.joint_make_damped_spring(RID(), Vector2.ZERO, Vector2.ZERO, body_a, RID())
	PhysicsServer2D.joint_make_damped_spring(RID(), Vector2.ZERO, Vector2.ZERO, RID(), body_b)
	PhysicsServer2D.joint_make_damped_spring(RID(), Vector2.ZERO, Vector2.ZERO, body_a, body_a)
	PhysicsServer2D.joint_make_damped_spring(RID(), Vector2.ZERO, Vector2.ZERO, body_a, body_b)
	PhysicsServer2D.joint_make_damped_spring(body_a, Vector2.ZERO, Vector2.ZERO, body_a, body_b)
	print("Spring joint empty tests passed.")

func test_spring_joint_base():
	# Base Joint
	var joint_rid = PhysicsServer2D.joint_create()
	assert(joint_rid != null)
	var joint_type = PhysicsServer2D.joint_get_type(joint_rid)
	# Should not be able to set any of specific values
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	var stiffness = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_STIFFNESS)
	assert(stiffness == 0)
	var length = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_REST_LENGTH)
	assert(length == 0)
	var damping = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_DAMPING)
	assert(damping == 0)
	PhysicsServer2D.damped_spring_joint_set_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_STIFFNESS, 2)
	PhysicsServer2D.damped_spring_joint_set_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_REST_LENGTH, 3)
	PhysicsServer2D.damped_spring_joint_set_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_DAMPING, 4)
	stiffness = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_STIFFNESS)
	assert(stiffness == 0)
	length = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_REST_LENGTH)
	assert(length == 0)
	damping = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_DAMPING)
	assert(damping == 0)
	# Wrong creation
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, RID(), RID())
	joint_type = PhysicsServer2D.joint_get_type(joint_rid)
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, RID(), body_a)
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, RID(), body_a_with_space1)
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, body_a, body_a)
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, body_a_with_space1, body_a_with_space1)
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, body_a_with_space1, body_b_with_space2)
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, body_a, RID())
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_MAX)
	PhysicsServer2D.joint_clear(joint_rid)
	print("Spring joint base tests passed.")

func test_spring_joint():
	# Base Joint
	var joint_rid = PhysicsServer2D.joint_create()
	assert(joint_rid != null)
	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2(1,2), Vector2(1,4), body_a_with_space1, body_b_with_space1)
	var joint_type = PhysicsServer2D.joint_get_type(joint_rid)
	assert(joint_type == PhysicsServer2D.JOINT_TYPE_DAMPED_SPRING)
	# Should be able to set any of specific values
	var stiffness = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_STIFFNESS)
	assert(stiffness == 20)
	var length = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_REST_LENGTH)
	assert(length == 2)
	var damping = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DampedSpringParam.DAMPED_SPRING_DAMPING)
	assert(damping == 1.5)
	PhysicsServer2D.damped_spring_joint_set_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_STIFFNESS, 2)
	PhysicsServer2D.damped_spring_joint_set_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_REST_LENGTH, 3)
	PhysicsServer2D.damped_spring_joint_set_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_DAMPING, 4)
	stiffness = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_STIFFNESS)
	assert(stiffness == 2)
	length = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_REST_LENGTH)
	assert(length == 3)
	damping = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_DAMPING)
	assert(damping == 4)
	# Reset Values
	PhysicsServer2D.free_rid(joint_rid)
	stiffness = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_STIFFNESS)
	assert(stiffness == 0)
	length = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_REST_LENGTH)
	assert(length == 0)
	damping = PhysicsServer2D.damped_spring_joint_get_param(joint_rid, PhysicsServer2D.DAMPED_SPRING_DAMPING)
	assert(damping == 0)
	
	# Cleanup
	PhysicsServer2D.joint_clear(joint_rid)
	joint_type = PhysicsServer2D.joint_get_type(joint_rid)
	assert(joint_type == PhysicsServer2D.JointType.JOINT_TYPE_MAX)
	
	var disabled_collisions = PhysicsServer2D.joint_is_disabled_collisions_between_bodies(joint_rid)
	assert(disabled_collisions == true)

	PhysicsServer2D.joint_make_damped_spring(joint_rid, Vector2.ZERO, Vector2.ZERO, RID())
	
	print("Spring joint tests passed.")
